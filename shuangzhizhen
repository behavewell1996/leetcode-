一、双指针
1、#167
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        if(nums.size()<2) return res;
        int l(0),r(nums.size()-1);
        while(l<r){
            if(nums[l]+nums[r]==target){
                res.push_back(l+1);
                res.push_back(r+1);
                return res;
            }
            else if(nums[l]+nums[r]>target){
                r--;
            }
            else{
                l++;
            }
        }
        return res;
    }
};
2、#633
class Solution {
public:
    bool judgeSquareSum(int c) {
        long long l = 0,r=(int)sqrt(c);
        while(l<r){
            long long int tmp = l*l+r*r;
            if(tmp==c) return true;
            else if(tmp<c){
                l++;
            }
            else{
                r--;
            }
        }
        return l*l*2==c;
    }
};
3、#345
class Solution {
public:
    bool isAEIOU(char c){
        c = tolower(c);
        return (c=='a'||c=='e'||c=='i'||c=='o'||c=='u');
    }
    string reverseVowels(string s) {
        if(s.size()==0) return s;
        int l(0),r(s.size()-1);
        while(l<r){
            if(!isAEIOU(s[l])){
                l++;
            }
            else if(!isAEIOU(s[r])){
                r--;
            }
            else{
                swap(s[l],s[r]);
                l++;
                r--;
            }
        }
        return s;
    }
};
4、#680
class Solution {
private:
    int count=0;
public:
    bool validPalindrome(string s) {
        if(s.size()==0) return true;
        int l(0),r(s.size()-1);
        while(l<r){
            if(s[l]==s[r]){
                l++;
                r--;
            }
            else{
                if(count==1) return false;
                else{
                    count++;
                    if(validPalindrome(s.substr(l,r-l))) return true;
                    else if(s[l+1]==s[r]){
                        return validPalindrome(s.substr(l+1,r-l));
                    }
                    else return false;
                }
            }
        }
        return true;
    }
};
5、#88
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int l(m-1),r(n-1);
        int cur = m+n-1;
        while(r>=0&&l>=0){
            if(nums1[l]>nums2[r]){
                nums1[cur] = nums1[l];
                cur--;
                l--;
            }
            else{
                nums1[cur] = nums2[r];
                cur--;
                r--;
            }
        }
        if(l<0){
            while(r>=0){
                nums1[cur]=nums2[r];
                r--;
                cur--;
            }
        }
        return;
    }
};
6、#141
class Solution {
public:
    bool hasCycle(ListNode *head) {
        //快慢指针
        if(head==NULL||head->next==NULL) return false;
        ListNode* l1 = head;
        ListNode* l2 = l1;
        while(l1!=NULL&&l2!=NULL&&l2->next!=NULL){
            l1 = l1->next;
            l2 = l2->next->next;
            if(l1==l2) return true;
        }
        return false;
    }
};
7、#524
class Solution {
public:
    string findLongestWord(string s, vector<string>& d) {
        sort(d.begin(),d.end());
        string res = "";
        int len = 0;
        for(int i=0;i<d.size();++i){
            int j = 0;
            int k = 0;
            while(j<s.size()){
                if(s[j]!=d[i][k]) j++;
                else{
                    j++;
                    k++;
                    if(k==d[i].size()&&k>len){
                        len = k;
                        res = d[i];
                    }
                }
            }
        }
        return res;
    }
};
